const express = require("express");
const cors = require("cors");
const multer = require("multer");
const path = require("path");
const fs = require("fs");
const { spawn } = require("child_process");

const app = express();
const PORT = 5000;

// Middleware (order is important)
app.use(cors());
app.use(express.json()); 

// Ensure uploads folder exists
const uploadDir = path.join(__dirname, "uploads");
if (!fs.existsSync(uploadDir)) {
Â  fs.mkdirSync(uploadDir);
}

// Multer setup
const upload = multer({ dest: uploadDir });

// Route: Analyze skin image
app.post("/api/analyze", upload.single("image"), (req, res) => {
Â  console.log("Request received at /api/analyze");

Â  console.log("Multer req.file status:", req.file ? "File found and saved." : "File NOT found (req.file is undefined).");
Â  
Â  if (!req.file) {
Â  Â  console.log("No image uploaded: Terminating request.");
Â  Â  return res.status(400).json({ error: "No image uploaded" });
Â  }

Â  const imagePath = path.resolve(req.file.path);
Â  console.log(`Image saved successfully at: ${imagePath}`);

Â  const pythonScript = path.join(__dirname, "ml", "predict.py");
Â  
Â  // ðŸš¨ CRITICAL FIX: Add environment variable to force UTF-8 encoding in Python
Â  const python = spawn("python", [pythonScript, imagePath], {
Â  Â  env: { 
Â  Â  Â  ...process.env, // Preserve existing environment variables
Â  Â  Â  PYTHONIOENCODING: 'utf-8' // Force UTF-8 for I/O streams
Â  Â  }
Â  });
Â  
Â  // NOTE: Remember to apply the absolute path fix and TF_CPP_MIN_LOG_LEVEL = '3'
Â  // inside your predict.py for best results.

Â  let resultBuffer = "";
Â  let errorOutput = "";

Â  python.stdout.on("data", (data) => {
Â  Â  resultBuffer += data.toString();
Â  });

Â  python.stderr.on("data", (data) => {
Â  Â  errorOutput += data.toString();
Â  Â  console.error("Python Error:", data.toString());
Â  });

Â  python.on("close", (code) => {
Â  Â  console.log(`Python script exited with code ${code}`);

Â  Â  // Clean up: Always attempt to delete the temporary file
Â  Â  if (fs.existsSync(imagePath)) {
Â  Â  Â  fs.unlinkSync(imagePath);
Â  Â  }

Â  Â  // --- Clean Prediction Extraction ---
Â  Â  const outputLines = resultBuffer.split('\n');
Â  Â  const finalResult = outputLines
Â  Â  Â  Â  .map(line => line.trim())
Â  Â  Â  Â  .filter(line => line.length > 0)
Â  Â  Â  Â  .pop();

Â  Â  console.log("Final Skin Type Extracted and Sent:", finalResult);

Â  Â  if (code !== 0 || !finalResult) {
Â  Â  Â  console.error("Prediction failed or empty result");
Â  Â  Â  return res.status(500).json({
Â  Â  Â  Â  error: "AI processing failed",
Â  Â  Â  Â  details: errorOutput || "No prediction output found.",
Â  Â  Â  });
Â  Â  }

Â  Â  // Send the clean result back to the React frontend
Â  Â  res.json({ skinType: finalResult });
Â  });
});

// Route: Get products by skin type (kept for completeness)
app.get("/api/products", (req, res) => {
Â  const skinType = req.query.skinType?.toLowerCase();

Â  const allProducts = {
Â  Â  oily: [
Â  Â  Â  { id: 1, name: "Oil-Free Moisturizer", description: "Hydrates without clogging pores", price: 299 },
Â  Â  Â  { id: 2, name: "Mattifying Sunscreen", description: "Controls shine and protects skin", price: 399 },
Â  Â  ],
Â  Â  dry: [
Â  Â  Â  { id: 3, name: "Hydrating Cream", description: "Deep moisture for dry skin", price: 349 },
Â  Â  Â  { id: 4, name: "Gentle Cleanser", description: "Cleans without stripping oils", price: 279 },
Â  Â  ],
Â  Â  normal: [
Â  Â  Â  { id: 5, name: "Balanced Moisturizer", description: "Maintains skin equilibrium", price: 319 },
Â  Â  Â  { id: 6, name: "Daily SPF Lotion", description: "Lightweight protection for everyday use", price: 359 },
Â  Â  ],
Â  };

Â  if (!skinType || !allProducts[skinType]) {
Â  Â  return res.status(404).json({ error: "No products found for the selected skin type." });
Â  }

Â  res.json(allProducts[skinType]);
});

// Start server
app.listen(PORT, () => {
Â  console.log(`Server running at http://localhost:${PORT}`);
});